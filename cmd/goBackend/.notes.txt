

<File	                Package	                Responsibilities
main.go	                main	                Starts app, initializes DB & server
models.go	            models	                Defines Account struct
api.go	                server	                Handles HTTP requests, API routes
storage.go	            database	            Interacts with PostgreSQL



file description:

            main.go
Initializes the PostgreSQL connection.
Starts the HTTP server on port 3000.

                            models.go
Defines an Account struct
Provides a simple constructor for creating new accounts.

Defines a Device struct
Provides a simple constructor for creating new devices.


            storage.go (Postgres Storage Layer)
Implements database operations (Create, Update, Delete, Get).
Interacts with an account table in PostgreSQL.
Needs modification to store and manage IoT/Embedded devices with accounts.



                api.go (HTTP Server Layer)
Handles HTTP requests using Gorilla Mux.
Defines API routes (/Account, /Account/{id}) to get, create, delete, and update accounts.
Uses a structured APIServer to manage request handling.
Needs refactoring to work with IoT devices rather than accounts.





TODO:


- Implement IoT-Specific Endpoints
Modify API endpoints to manage devices instead of accounts:
GET /device/{id} → Retrieve a device’s current state.
POST /device → Register a new device.
DELETE /device/{id} → Remove a device.


- Connect With the C++ TCP Client
Implement a new API route (/device/data) where the C++ TCP client can send real-time sensor values.
The server should parse the incoming JSON from the C++ TCP client and store it in the database.





MQTT: Best for low-bandwidth, IoT-style messaging. Use for sensor data, commands, or device events.
WebSockets: Best for live updates in the UI (e.g., a real-time dashboard).